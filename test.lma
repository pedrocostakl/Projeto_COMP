declare i32 @printf(i8*, ...)
declare i32 @atoi(i8 zeroext)

@format_int = private constant [4 x i8] c"%d\0A\00"
@format_float32 = private constant [6 x i8] c"%.8f\0A\00"
@format_strlit = private constant [4 x i8] c"%s\0A\00"

define i32 @_factorial(i32 %n) {
  %1 = add i32 %n, 0
  %2 = add i32 0, 0
  %3 = icmp eq i32 %1, %2
  br i1 %3, label %L0then, label %L0else
L0then:
  %4 = add i32 1, 0
  ret i32 %4
L0else:
  br label %L0end
L0end:
  %5 = add i32 %n, 0
  %6 = add i32 %n, 0
  %7 = add i32 1, 0
  %8 = sub i32 %6, %7
  %9 = call i32 @_factorial(i32 %8)
  %10 = mul i32 %5, %9
  ret i32 %10
}

define i32 @_test(i32 %max) {
  %i1 = alloca i32
  %i2 = alloca i32
  %i3 = alloca i32
  %1 = add i32 0, 0
  store i32 %1, i32* %i1
  %2 = add i32 %max, 0
  store i32 %2, i32* %i2
  br label %L1for
L1for:
  %3 = load i32, i32* %i1
  %4 = load i32, i32* %i2
  %5 = icmp slt i32 %3, %4
  br i1 %5, label %L1then, label %L1end
L1then:
  %6 = load i32, i32* %i1
  %7 = add i32 1, 0
  %8 = add i32 %6, %7
  %9 = call i32 @_factorial(i32 %8)
  store i32 %9, i32* %i3
  %10 = load i32, i32* %i3
  %11 = getelementptr [4 x i8], [4 x i8]* @format_int, i32 0, i32 0
  %12 = call i32 (i8*, ...) @printf(i8* %11, i32 %10)
  %13 = load i32, i32* %i1
  %14 = add i32 1, 0
  %15 = add i32 %13, %14
  store i32 %15, i32* %i1
  br label %L1for
L1end:
  %16 = add i32 0, 0
  ret i32 %16
}

define i32 @_main() {
  %i1 = alloca i32
  %i2 = alloca i32
  %1 = add i32 0, 0
  store i32 %1, i32* %i1
  %2 = add i32 10, 0
  store i32 %2, i32* %i2
  br label %L2for
L2for:
  %3 = load i32, i32* %i1
  %4 = load i32, i32* %i2
  %5 = icmp slt i32 %3, %4
  br i1 %5, label %L2then, label %L2end
L2then:
  %6 = load i32, i32* %i1
  %7 = add i32 1, 0
  %8 = add i32 %6, %7
  %9 = call i32 @_test(i32 %8)
  %10 = load i32, i32* %i1
  %11 = add i32 1, 0
  %12 = add i32 %10, %11
  store i32 %12, i32* %i1
  br label %L2for
L2end:
  %13 = add i32 0, 0
  ret i32 %13
}

define i32 @main() {
  %1 = call i32 @_main()
  ret i32 %1
}
